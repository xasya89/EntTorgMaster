@page "/orderlist"
@page "/orderlist/{currentpage}"
@using EntTorgMaster.Helpers@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IDbContextFactory<enttorgsnabContext> dbFactory
@inject NavigationManager NavigationManager

<h3>Заказы</h3>

<Button Clicked=@(()=>NavigationManager.NavigateTo("order-edit")) Size=Size.Small Color=Color.Success>Новый</Button>

<input @onchange=@(async (e)=>await Select(e.Value as string))/>

<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                    @pageNumberAsString
                </PaginationLink>
            </PaginationItem>
        } 
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

<Table Responsive Bordered Narrow>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Создан</TableHeaderCell>
            <TableHeaderCell>Счет</TableHeaderCell>
            <TableHeaderCell>Дата</TableHeaderCell>
            <TableHeaderCell>Срок</TableHeaderCell>
            <TableHeaderCell>Дверей</TableHeaderCell>
            <TableHeaderCell>Заказчик</TableHeaderCell>
            <TableHeaderCell>Статус</TableHeaderCell>
            <TableHeaderCell>Счет</TableHeaderCell>
            <TableHeaderCell>Счет</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach(var order in ordersInView)
        {
            Color statusColor = Color.Light;
            switch (order.Status)
            {
                case OrderStatus.New: statusColor = Color.Primary;
                    break;
                case OrderStatus.Work: statusColor = Color.Warning;
                    break;
                case OrderStatus.Complite: case OrderStatus.Shipment: statusColor = Color.Success;
                    break;
            }
            <TableRow Clicked=@(()=>NavigationManager.NavigateTo($"order-edit/{order.Id}")) Color=@statusColor>
                <TableRowCell>@order.DateCreate.ToString("dd.MM.yy")</TableRowCell>
                <TableRowCell>@order.Shet</TableRowCell>
                <TableRowCell>@(order.ShetDate?.ToString("dd.MM.yy") ?? "")</TableRowCell>
                <TableRowCell>0</TableRowCell>
                <TableRowCell>@order.OrderDoors.Sum(d=>d.Count)</TableRowCell>
                <TableRowCell>@order.CustomerName</TableRowCell>
                <TableRowCell>@order.Status.GetEnumDescription()</TableRowCell>
                <TableRowCell></TableRowCell>
                <TableRowCell></TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

@code {
    IEnumerable<Order> orders = new List<Order>();
    IEnumerable<Order> ordersInView = new List<Order>();
    int rowcount = 50;

    protected override async Task OnInitializedAsync() => await Select();

    private async Task Select(string str="")
    {
        using(var db = dbFactory.CreateDbContext())
        {
            int orderCount = await db.Orders
            .Where(o=>EF.Functions.Like(o.Shet, $"%{str}%"))
            .CountAsync();
            pageItems = orderCount / rowcount > 10 ? 10 : orderCount / rowcount + (orderCount%rowcount == 0 ? 0 : 1);
            if (pageItems == 0)
                pageItems = 1;
            if (currentPage == null)
                currentPage = "1";
            orders = await db.Orders.Include(o => o.OrderDoors)
            .Where(o=>EF.Functions.Like(o.Shet, $"%{str}%"))
            .OrderByDescending(o => o.DateCreate).ToListAsync();
            ordersInView = orders.Skip((int.Parse(currentPage) - 1) * rowcount).Take(rowcount);
            currentPage = "1";
        }
    }

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    [Parameter]
    public string currentPage{ get; set; } = "1";
    private int pageItems = 2;

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation )
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage?.Equals("1") ?? true;
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1 )
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems )
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private void SetActive(string page)
    {
        currentPage = page;
        ordersInView = orders.Skip((int.Parse(currentPage) - 1) * rowcount).Take(rowcount);
    }
}
