@page "/stockroom"
@using EntTorgMaster.Helpers
@using AutoMapper
@inject IDbContextFactory<enttorgsnabContext> _dbFactory
@inherits OwningComponentBase
@implements IDisposable

<h3>Склад</h3>

<div class="row mb-2 gy-2 gx-3 align-items-center">
    <div class="col-auto">
        <label class="form-label">Наименование</label>
    </div>
    <div class="col-auto">
        <input @bind-value=@findGoodName class="form-control form-control-sm"/>
    </div>
    <div class="col-auto">
        <label class="form-label">Тип</label>
    </div>
    <div class="col-auto">
                <Select TValue=GoodTypeFilterModel SelectedValue=@findGoodType SelectedValueChanged=@(e=>findGoodType=e) Class="form-select form-select-sm">
                    @foreach(Enum type in Enum.GetValues(typeof(GoodTypeFilterModel)))
                    {
                        <SelectItem Value="@type">@type.GetEnumDescription()</SelectItem>
                    }
                </Select>
    </div>
    <div class="col-auto">
        <Button Clicked=Select Size=Size.Small Color=Color.Primary>Поиск</Button>
    </div>
</div>

<div class="table-responsive table-responsive-sm">
    <table class="table table-sm table-bordered table-hover">
        <thead>
            <tr>
                <th></th>
                <th>Материал</th>
                <th>Тип</th>
                <th>Ед</th>
                <th>Остаток</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var good in goods)
            {
                <tr>
                    <td>
                        <Button Clicked=@(()=>RemoveGoodStart(good)) Size=Size.Small Color=Color.Light>
                            <Icon Name=IconName.Remove/>
                        </Button>
                    </td>
                    <td>@good.Name</td>
                    <td>@good.TypeStr</td>
                    <td>@good.UnitStr</td>
                    <td>@good.GoodBalance.Count</td>
                    <td>
                        @if(!good.isEnable)
                        {
                            <Span>Удален</Span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<ConfirmDialog @ref=confirmDialog Title="" Message="Удалить номенклатуру?" DialogOk=RemoveGood />

@code{
    @inject IMapper mapper
    private enttorgsnabContext _db;
    private List<Good> goods = new List<Good>();
    private Good selectedGood = new Good();
    private string findGoodName = "";
    private GoodTypeFilterModel findGoodType = GoodTypeFilterModel.None;
    private ConfirmDialog confirmDialog;

    protected override async Task OnInitializedAsync()
    {
        _db = await _dbFactory.CreateDbContextAsync();
        await Select();
        await base.OnInitializedAsync();
    }

    private async Task Select()
    {
        if (findGoodType == GoodTypeFilterModel.None)
            goods = await _db.Goods.Include(g => g.GoodBalance)
            .Where(g => EF.Functions.Like(g.Name, $"%{findGoodName}%"))
            .OrderBy(g => g.Name).AsNoTracking().ToListAsync();
        else
        {
            GoodType goodType = mapper.Map<GoodType>(findGoodType);
            goods = await _db.Goods.Include(g => g.GoodBalance)
            .Where(g => EF.Functions.Like(g.Name, $"%{findGoodName}%") & g.Type==goodType)
            .OrderBy(g => g.Name).AsNoTracking().ToListAsync();
        };
    }

    Good selectedRemoveGood = null;
    private void RemoveGoodStart(Good good)
    {
        selectedRemoveGood = good;
        confirmDialog.ShowModal();
    }

    private async Task RemoveGood()
    {
        var good = await _db.Goods.Where(g => g.Id == selectedRemoveGood.Id).FirstOrDefaultAsync();
        good.isEnable = false;
        await _db.SaveChangesAsync();
        await Select();
    }

    public void Dispose() => _db.Dispose();
}