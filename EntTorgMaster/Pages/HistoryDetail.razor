@page "/history/{eventTypeInt:int?}/{documentId:int?}"
@using System.Text.Json
@inherits OwningComponentBase

<h3>История</h3>

<Div Class="row">
    <Div Class="col-3">
        <ListGroup Mode="ListGroupMode.Selectable" SelectedItemChanged=@(e=>ChangeSelected(int.Parse(e)))>
            @foreach(var history in histories)
            {
                <ListGroupItem Name="@history.Id.ToString()">@history.User.Name - @history.Create.ToString("dd.MM.yy")</ListGroupItem>
            }
         </ListGroup>
    </Div>
    <Div Class="col-9">
        @switch (selectedHIstory?.EventType)
        {
            case HistoryEventType.Order:
                <div Class="row g-3 align-content-center mb-3">
                    <div class="col-auto">
                        <Label>Счет</Label>
                    </div>
                    <div class="col-auto">
                        @selectedAsOrder.Shet
                    </div>
                    <div class="col-auto">
                        <Label>Дата</Label>
                    </div>
                    <div class="col-auto">
                        @selectedAsOrder.ShetDate?.ToString("dd.MM.yy")
                    </div>
                </div>
                break;
        }
    </Div>
</Div>

@code {
    [Inject]
    public IDbContextFactory<enttorgsnabContext> _dbFactory{ get; set; }

    [Parameter]
    public int? eventTypeInt{ get; set; }
    private HistoryEventType eventType;
    [Parameter]
    public int? documentId{ get; set; }

    private List<History> histories = new();
    private History selectedHIstory;
    private Order selectedAsOrder;

    protected override async Task OnInitializedAsync()
    {
        eventType = (HistoryEventType)eventTypeInt;
        using var db = _dbFactory.CreateDbContext();
        histories = await db.Histories.Include(h=>h.User)
            .Where(h => h.EventType == eventType & h.DocumentId == documentId).OrderByDescending(h=>h.Create).ToListAsync();
        await base.OnInitializedAsync();
    }

    private void ChangeSelected(int id)
    {
        var history=histories.Where(h => h.Id == id).FirstOrDefault();
        selectedAsOrder = JsonSerializer.Deserialize<Order>(history.Document);
        selectedHIstory = history;
    }
}
